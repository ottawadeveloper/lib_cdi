<?php

class CDIEntityReceiver extends GenericEntityRecevier
  implements CDIIDInterface,
        CDILoadInterface,
        CDISaveInterface,
        CDIDeleteInterface,
        CDIDisplayInterface,
        CDIStubInterface,
        CDILabelInterface,
        CDIListInterface, 
        CDISimpleListInterface,
        CDICanonUrlInterface {
  
  private static $supportedDisplayTypes = array(
    CDI_DISPLAY_TYPE_HTML,
  );
  
  private static $supportedDisplayModes = array(
    CDI_DISPLAY_MODE_FULL,
    CDI_DISPLAY_MODE_SUMMARY,
  );  
  
  public function validateDataType(CDIDataTypeInterface $dataType, $commandClass) {
    if (!parent::validateDataType($dataType, $commandClass)) {
      return FALSE;
    }
    switch ($commandClass) {
      // Provided by core.
      case 'CDILoadCommand':
      case 'CDIIDCommand':
      case 'CDILabelCommand':
      case 'CDIListCommand':
      case 'CDISimpleListCommand':
      case 'CDICanonUrlCommand':
        return TRUE;
      // Provided by the entity module.
      case 'CDISaveCommand':
        return $this->entityModuleSupport('save');
      case 'CDIDeleteCommand':
        return $this->entityModuleSupport('delete');
      case 'CDIDisplayCommand':
        return $this->entityModuleSupport('view');
      case 'CDIStubCommand':
        return $this->entityModuleSupport('create')
          & ($this->hasBundle() !== FALSE);
    }
    return FALSE;
  }
  
  public function url(CDIDataObjectInterface $dataObject) {
    return entity_uri($this->entity_type, $dataObject->getRawValue('object'));
  }
  
  public function listSimpleItems($size = NULL, $page = NULL) {
    $efq = $this->buildGenericQuery($size, $page);
    $rs = $efq->execute();
    $results = array();
    foreach ($rs[$this->entity_type] as $stub) {
      list($id,,) = entity_extract_ids(
        $this->entity_type,
        $stub
      );
      $entity = entity_load($this->entity_type, $id);
      $results[$id] = entity_label($this->entity_type, $entity);
    }
    return $results;
  }
  
  public function listItems($size = NULL, $page = NULL) {
    $efq = $this->buildGenericQuery($size, $page);
    $rs = $efq->execute();
    $results = array();
    foreach ($rs[$this->entity_type] as $stub) {
      list($id,,) = entity_extract_ids(
        $this->entity_type,
        $stub
      );
      $results[$id] = $this->load($id);
    }
    return $results;
  }
  
  private function buildGenericQuery($size = NULL, $page = NULL) {
    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', $this->entity_type);
    if (!empty($this->bundle)) {
      $efq->entityCondition('bundle', $this->bundle);
    }
    if (!empty($size)) {
      $length = (int) $size;
      $start = 0;
      if (!empty($page)) {
        $start += $page * $length;
      }
      $efq->range($start, $length);
    }
    return $efq;
  }
    
  public function label(CDIDataObject $dataObject) {
    return entity_label($this->entity_type, $dataObject->getRawValue('object'));
  }
    
  public function stub($initialValues = array()) {
    $bkey = $this->getBundleKey();
    if (!empty($bkey)) {
      $initialValues[$bkey] = $this->bundle;
    }
    $object = entity_create($this->entity_type, $initialValues);
    $cdi = new CDIDataObject(cdi_entity_data_type($this->entity_type, $this->bundle));
    $cdi->setRawValue('object', $object);
    return $cdi;
  }
  
  public function supportsDisplayConfiguration($type, $mode) {
    return in_array($mode, self::$supportedDisplayModes) &&
      in_array($type, self::$supportedDisplayTypes);
  }
  
  public function display(CDIDataObjectInterface $object, $type, $mode) {
    $view_mode = 'full';
    switch ($mode) {
      case CDI_DISPLAY_MODE_SUMMARY:
        $view_mode = 'teaser';
        break;
    }
    $entity = $object->getRawValue('object');
    $render = entity_view($this->entity_type, array($entity), $view_mode);
    return drupal_render($render);
  }
  
  public function save(CDIDataObjectInterface $object) {
    return entity_save(
        $this->entity_type,
        $object->getRawValue('object')
    );
  }
  
  public function delete(CDIDataObjectInterface $object) {
    return entity_delete(
        $this->entity_type,
        $this->id($object));
  }
  
  public function load($id) {
    $object = new CDIDataObject(cdi_entity_data_type($this->entity_type, $this->bundle));
    $entities = entity_load($this->entity_type, array($id));
    $object->setRawValue('object', reset($entities));
    return $object;
  }
  
  public function id(CDIDataObjectInterface $object) {
    list($id,,) = entity_extract_ids(
        $this->entity_type,
        $object->getRawValue('object')
    );
    return $id;
  }
  
}